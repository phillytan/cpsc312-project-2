CPSC 100 (3) Computational Thinking
Meaning and impact of computational thinking. Solving problems using computational thinking, testing, debugging. How computers work. No prior computing experience required. Not for students with existing credit for or exemption from CPSC 107, CPSC 110 or APSC 160. [3-1-0]
CPSC 103 (3) Introduction to Systematic Program Design
Computation as a tool for systematic problem solving in non-computer-science disciplines. Introductory programming skills. Not for credit for students who have credit for, or exemption from, or are concurrently taking CPSC 110 or APSC 160. No programming experience expected. [3-0-1]
CPSC 107 (3) Systematic Program Design
Fundamental computation and program structures. Continuing systematic program design from CPSC 103. [3-2-0]
Prerequisite: CPSC 103.
CPSC 110 (4) Computation, Programs, and Programming
Fundamental program and computation structures. Introductory programming skills. Computation as a tool for information processing, simulation and modelling, and interacting with the world. [3-3-0]
CPSC 121 (4) Models of Computation
Physical and mathematical structures of computation. Boolean algebra and combinations logic circuits; proof techniques; functions and sequential circuits; sets and relations; finite state machines; sequential instruction execution. [3-2-1]
Prerequisite: Principles of Mathematics 12 or Pre-calculus 12.
Corequisite: CPSC 110
CPSC 203 (3) Programming, Problem Solving, and Algorithms
Analysis of increasingly complex algorithmic problems, using a modern programming language and a variety of approaches. Problem decomposition and abstraction guide explorations of topics from applied algorithms, for example Voronoi Diagrams, Markov Chains, Bin Packing, and Graph Search. Not for students with credit for, or currently enrolled in, CPSC 210 or CPEN 221. [3-0-1]
Prerequisite: CPSC 103
CPSC 210 (4) Software Construction
Design, development, and analysis of robust software components. Topics such as software design, computational models, data structures, debugging, and testing. [3-2-0]
Prerequisite: One of CPSC 107, CPSC 110.
CPSC 213 (4) Introduction to Computer Systems
Software architecture, operating systems, and I/O architectures. Relationships between application software, operating systems, and computing hardware; critical sections, deadlock avoidance, and performance; principles and operation of disks and networks. [3-3-0]
Prerequisite: All of CPSC 121, CPSC 210.
CPSC 221 (4) Basic Algorithms and Data Structures
Design and analysis of basic algorithms and data structures; algorithm analysis methods, searching and sorting algorithms, basic data structures, graphs and concurrency. [3-2-0]
Prerequisite: One of CPSC 210, CPEN 221 and one of CPSC 121, MATH 220.
CPSC 304 (3) Introduction to Relational Databases
Overview of database systems, ER models, logical database design and normalization, formal relational query languages, SQL and other commercial languages,data warehouses, special topics. [3-0-1]
Prerequisite: CPSC 221.
CPSC 310 (4) Introduction to Software Engineering
Specification, design, validation, evolution and construction of modern software systems, within the context of socially and professionally relevant domains such as ethics, intellectual property, and information security. [3-2-0]
Prerequisite: All of CPSC 213, CPSC 221.
CPSC 311 (3) Definition of Programming Languages
Comparative study of advanced programming language features. Statement types, data types, variable binding, parameter passing mechanisms. Methods for syntactic and semantic description of programming languages. [3-0-1]
Prerequisite: CPSC 210.
CPSC 312 (3) Functional and Logic Programming
Principles of symbolic computing, using languages based upon first-order logic and the lambda calculus. Algorithms for implementing such languages. Applications to artificial intelligence and knowledge representation. [3-0-0]
Prerequisite: One of CPSC 210, CPEN 221.
CPSC 313 (3) Computer Hardware and Operating Systems
Instruction sets, pipelining, code optimization, caching, virtual memory management, dynamically linked libraries, exception processing, execution time of programs. [3-0-1]
Prerequisite: All of CPSC 213, CPSC 221.
CPSC 314 (3) Computer Graphics
Human vision and colour; geometric transformations; algorithms for 2-D and 3-D graphics; hardware and system architectures; shading and lighting; animation. [3-1-0]
Prerequisite: CPSC 221 and one of MATH 200, MATH 221
CPSC 317 (3) Internet Computing
Computer networking, basic communication protocols, network infrastructure and routing. Common application-level protocols and principles associated with developing distributed applications. [3-0-1]
Prerequisite: All of CPSC 213, CPSC 221.
CPSC 320 (3) Intermediate Algorithm Design and Analysis
Systematic study of basic concepts and techniques in the design and analysis of algorithms, illustrated from various problem areas. Topics include: models of computation; choice of data structures; graph-theoretic, algebraic, and text processing algorithms. [3-0-1]
Prerequisite: CPSC 221 
CPSC 322 (3) Introduction to Artificial Intelligence
Problem-solving and planning; state/action models and graph searching. Natural language understanding Computational vision. Applications of artificial intelligence. [3-0-0]
Prerequisite: CPSC 221.
CPSC 330 (3) Applied Machine Learning
Application of machine learning tools, with an emphasis on solving practical problems. Data cleaning, feature extraction, supervised and unsupervised machine learning, reproducible workflows, and communicating results. [3-0-1]
Prerequisite: CPSC 210
CPSC 340 (3) Machine Learning and Data Mining
Models of algorithms for dimensionality reduction, nonlinear regression, classification, clustering and unsupervised learning; applications to computer graphics, computer games, bio-informatics, information retrieval, e-commerce, databases, computer vision and artificial intelligence. [3-0-1]
Prerequisite: CPSC 221, MATH 221, MATH 200, 
CPSC 344 (3) Introduction to Human Computer Interaction Methods
Basic tools and techniques, teaching a systematic approach to interface design, task analysis, analytic and empirical evaluation methods. [2-2-2]
Prerequisite:  CPSC 210
CPSC 368 (3) Databases in Data Science
Overview of relational and non-relational database systems, role and usage of a database when querying data, data modelling, query languages, and query optimization. [3-0-1]
Prerequisite: CPSC 210
CPSC 402 (3) Numerical Linear Algebra
Investigation of the practical techniques of computational linear algebra. Orthogonal transformations and their application to the solution of linear equations, the eigenproblem, and linear least squares. Complete solution of the symmetric eigenproblem, including bisection and the QR method. Refinements of these techniques for sparse matrices. [3-0-0]
Prerequisite: One of CPSC 302
CPSC 404 (3) Advanced Relational Databases
Physical database design, indexing, relational query processing and optimization, transaction processing, concurrency control, crash recovery, data warehouses, data cubes, views, special topics. [3-0-0]
Prerequisite: CPSC 304 and  CPSC 213
CPSC 406 (3) Computational Optimization
Formulation and analysis of algorithms for continuous and discrete optimization problems; linear, nonlinear, network, dynamic, and integer optimization; large-scale problems; software packages and their implementation; duality theory and sensitivity. [3-0]
Prerequisite: One of CPSC 302
CPSC 410 (3) Advanced Software Engineering
Specification, design, construction and validation of multi-version software systems. [3-0-0]
Prerequisite: CPSC 310
CPSC 411 (3) Introduction to Compiler Construction
A practical introduction to lexical analysis, syntactic analysis, type-checking, code generation and optimization. This will be used to design and implement a compiler for a small language. [3-0-0]
Prerequisite: All of CPSC 213, CPSC 221, CPSC 311.
CPSC 415 (3) Advanced Operating Systems
Process synchronization and communication schemes, including message-passing and concepts of monitor and serializer. Virtual memory systems management and the problem of information sharing in such systems. The working set principle. Traps and interrupt handling. Elementary queuing theory and its application such as process scheduling, system balancing and load control. File systems and operating system design methodologies. [3-0-0]
Prerequisite: One of CPSC 313
CPSC 416 (3) Distributed Systems
Concepts and design of distributed systems. Communication architecture and models for interprocess communication. Process migration, naming, distributed file systems, fault tolerance, and concurrency control. [3-0-0]
Prerequisite: One of CPSC 313, CPEN 331 and CPSC 317
CPSC 417 (3) Computer Networking
Network protocols and architecture including internetworking, the Internet, layered communication protocols, routing, flow and congestion control, network performance, wired and wireless data communication. [3-0]
Prerequisite: All of CPSC 313, CPSC 317, STAT 200
CPSC 418 (3) Parallel Computation
Algorithms, architectures, and programming paradigms for parallel computation. Shared memory, message passing, and data parallel architectures and programming models. Parallel algorithms including reduce, scan, and sorting networks. Reasoning about the correctness of parallel programs. Performance analysis and measurement for parallel programs. [3-0-0]
Prerequisite: CPSC 320 and CPSC 313
CPSC 420 (3) Advanced Algorithms Design and Analysis
The study of advanced topics in the design and analysis of algorithms and associated data structures. Topics include algorithms for graph-theoretic; algebraic and geometric problems; algorithms on nonsequential models; complexity issues; approximation algorithms. [3-0-0]
Prerequisite: CPSC 320.
CPSC 421 (3) Introduction to Theory of Computing
Characterizations of computability (using machines, languages and functions). Universality, equivalence and Church's thesis. Unsolvable problems. Restricted models of computation. Finite automata, grammars and formal languages. [3-0-0]
Prerequisite: CPSC 221. CPSC 320 is recommended.
CPSC 422 (3) Intelligent Systems
Principles and techniques underlying the design, implementation and evaluation of intelligent computational systems. Applications of artificial intelligence to natural language understanding, image understanding and computer-based expert and advisor systems. Advanced symbolic programming methodology. [3-0-0]
Prerequisite: CPSC 322.
CPSC 424 (3) Geometric Modelling
Digital representation of curves and surfaces, including splines, subdivision surfaces and meshes. Principles, algorithms and mathematical foundations for geometry representation in computer graphics, computer vision, fabrication, CAD/CAM, and medical imaging. Algorithms for acquisition, creation, representation, and processing of 3D shapes. [3-0-1]
Prerequisite: CPSC 320, MATH 221, MATH 200,
CPSC 425 (3) Computer Vision
Introduction to the processing and interpretation of images. Image sensing, sampling, and filtering. Algorithms for colour analysis, texture description, stereo imaging, motion interpretation, 3D shape recovery, and recognition. [3-0-0]
Prerequisite: All of CPSC 221, MATH 200, MATH 221.
CPSC 426 (3) Computer Animation
Motion in computer graphics for characters and their environments. Keyframing, inverse kinematics, particle systems, rigid body dynamics, contact and collision, controller-based active motion, motion capture. [3-0-0]
Prerequisite: CPSC 314.
CPSC 427 (3) Video Game Programming
Video game programming techniques and technologies, including rendering, animation, interaction, game AI, real-time software development for games; start-to-finish simple video-game design and implementation. [3-0-1]
Prerequisite: CPSC 221 and MATH 200 and MATH 221
CPSC 430 (3) Computers and Society
Impact of computer technology on society; historical perspectives; social and economic consequences of large-scale information processing systems and automatic control; legal and ethical problems in computer applications. Computers and the individual: machine versus human capabilities, fact and fancy; problematic interface between man and machine. [3-0-0]
CPSC 440 (3) Advanced Machine Learning
Advanced machine learning techniques focusing on probabilistic models. Deep learning and differentiable programming, exponential families and Bayesian inference, probabilistic graphical models and other generative models, Monte Carlo and variational inference methods. [3-0-1]
Prerequisite: All of CPSC 320, CPSC 340.
CPSC 444 (3) Advanced Methods for Human Computer Interaction
Design and evaluation methodologies and theories; formal models of the user including visual, motor, and information processing; advanced evaluation methods including laboratory experiments and field studies; HCI research frontiers. [2-2-2]
Prerequisite: CPSC 344 and one of STAT 200
CPSC 447 (3) Introduction to Visualization
Design and implementation of static and interactive visualizations. Selection of appropriate visualization methods for given combinations of data type and intended analysis task. Assessment of visual representations according to design and perceptual principles. [3-0-0]
Prerequisite: One of CPSC 310, CPEN 321.
CPSC 455 (3) Applied Industry Practices
Hands-on project, mentored by industry experts, integrating skills relevant to early career in the computing industry: technical skills, communication, teamwork, networking and portfolio building. [2.5-2-0]
Prerequisite: One of CPSC 310